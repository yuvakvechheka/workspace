package saxAPI;

import java.util.ArrayList;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

public class Inspector extends DefaultHandler {
	boolean firstname, lastname, residence, children, children_firstname, person;
	ArrayList<Person> allPersons = new ArrayList<>();
	Person currentPerson = new Person();

	public void startDocument() throws SAXException {
	}

	public void endDocument() throws SAXException {

		for (int i = 0; i < allPersons.size(); i++) {
			System.out.print("firstname: " + allPersons.get(i).firstname + " lastname: " + allPersons.get(i).lastname
					+ " children " + allPersons.get(i).children + " residence: " + allPersons.get(i).residence);
			System.out.println();

		}
	}

	public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {

		firstname = localName.equals("firstname");
		lastname = localName.equals("lastname");
		residence = localName.equals("residence");
		children = localName.equals("children");

		if (localName.equals("children"))
			children = true;

		children_firstname = localName.equals("firstname") && children;

		if (localName.equals("person")) {
			person = !person;
		}
	}

	public void endElement(String uri, String localName, String qName) throws SAXException {
		if (localName.equals("children"))
			children = false;

	}

	public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {
	}

	public void characters(char[] ch, int start, int length) throws SAXException {
		if (firstname)
			System.out.println("Firstname:  " + new String(ch, start, length));
		if (children_firstname)
			System.out.println("children firstname:  " + new String(ch, start, length));
			System.out.println("Person---------------------------- "+ person);

		if (person) {
			if (firstname) {
				currentPerson.firstname = new String(ch, start, length);
			System.out.println("asdfasfsd:  " + new String(ch, start, length));

			
			}else if (lastname) {
				currentPerson.lastname = new String(ch, start, length);
			} else if (children) {
				currentPerson.children = true;
			} else if (residence)
				currentPerson.residence = new String(ch, start, length);

		} else {
			allPersons.add(currentPerson);
			currentPerson.firstname = "";
			currentPerson.lastname = "";
			currentPerson.residence = "";
			currentPerson.children = false;
		}

	}

	public void startPrefixMapping(String prefix, String uri) {
		System.out.println("startPrefixMapping");
	}

	public void endPrefixMapping(String prefix) {
		System.out.println("endPrefixMapping");
	}

	public static void main(String[] args) throws Exception {

		// 1. Instanz des ContentHandlers erzeugen
		ContentHandler contentHandler = new Inspector();

		// 2. SAX-Treiber erzeugen
		SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();
		saxParserFactory.setNamespaceAware(true);
		SAXParser parser = saxParserFactory.newSAXParser();
		XMLReader xmlReader = parser.getXMLReader();

		// 3. Call-back fÃ¼r ContentHandler setzen
		xmlReader.setContentHandler(contentHandler);

		// 4. Verarbeitung starten
		xmlReader.parse("src/saxAPI/persons.xml");

	}

}