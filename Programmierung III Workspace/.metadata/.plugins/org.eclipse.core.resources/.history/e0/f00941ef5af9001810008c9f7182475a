package tu.rest02.controller;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Base64;
import java.io.PrintWriter;
import java.net.Socket;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;
import org.json.*;

import tu.rest02.LED;

@RestController
@RequestMapping("/rest02")
public class Controller {
	// create gpio controller
	LED l = new LED();
	//final String url = LED.url;
	//public String UPLOAD_URL = "http://172.19.49.13:5000/";
	//public String UPLOAD_URL = "152:5000";
	public static final String UPLOAD_IMAGE_NAME = "files";
	public static final Boolean ACTIVE_SAP = true;

	public static final String FORWARD_URL = "http://localhost:8082/rest02/forward/image";
	public static final String FORWARD_IMAGE_NAME = "files";
	public static final String GET_UNITY_DATA_URL = "http://192.168.50.10:5000/get_unity_data?name=";
	public static final String DOWNLOAD_DEFAULT_FILE_NAME = "test01";
	public static final String CLIENT_SECRET = "WAme6a4JHSY4kgReye2L60waaDo=";
	public static final String CLIENT_ID = "sb-1a800439-2538-44b4-a7e7-d67924a55e90!b3366|ml-foundation-xsuaa-std!b540";
	public static final String SAP_AUTH_URL = "https://abatcf.authentication.eu10.hana.ondemand.com/oauth/token?grant_type=client_credentials";
	public static final String IMAGE_LOCATION = "/spring_rest_02/tmp/image/";
	public static final String DEFAULT_IMAGE = "file01.jpg";
	public static final String UPLOAD_IMAGE = "file00.jpg";
	
	public static final String PRINTER_COMMAND = "command";
	public static final String PRINTER_PRINT = "filename";
	public static final String PRINTER_PRINT_PRINTER_ID = "printerid";
	//IP des 3D Druckers 172.19.49.14 ist statisch
	public static final String PRINTER_SOCKET_3D = "172.19.49.14";
	public static final String PRINTER_SOCKET_HP = "172.19.49.19";
	
	public static final String [] PRINTER_SOCKETS = {PRINTER_SOCKET_3D,PRINTER_SOCKET_HP};
	
	// PRINTER_PORTS[0] => 3D, PRINTER_PORT[1] => HP
	public static final int [] PRINTER_PORTS = {23, 80}; 
	public static final int ACTIVE_PRINT = 1;


	protected static String lastImage = DEFAULT_IMAGE;

	/**
	 * Service to upload a jpeg image file. The uploaded file is stored directly
	 * and is forwarded to another url which finally saves the file.
	 * 
	 * As a client for forwarding use <code>tu.rest02.standalone.DoUpload</code>.
	 * 
	 * Url of this service: http://localhost:8082/rest02/forward/image
	 * 
	 * Upload url called from this service:
	 * http://localhost:8082/rest02/upload/image
	 * 
	 * @param file
	 * @param request
	 * @param response
	 * @return
	 */
	
	
	@RequestMapping(value = "/forward/image", method = RequestMethod.POST)
	public synchronized ResponseEntity<String> forwardImage(@RequestParam(value = FORWARD_IMAGE_NAME) MultipartFile file,
			HttpServletRequest request, HttpServletResponse response) {
		System.out.printf("%s.forwardImage(\"%s\")\n", getClass().getSimpleName(), file.getOriginalFilename());
		
		//LED f√ºr SAP or Tensorflow
		String UPLOAD_URL = LED.url;
		
		String message;
		String accessToken;
		HttpStatus status;
		String message_auth;
		boolean ACTIVE_SAP = !LED.url.equals("http://172.19.49.13:5000/get_prediction");
		
			// byte[] bytes = file.getBytes();
			// System.out.printf("%s.forwardImage: read image as a byte array of length %s\n", getClass().getSimpleName(),bytes.length);
			
			if (!ACTIVE_SAP) {
				try {
					//bodyMap Http 
					MultiValueMap<String, Object> bodyMap = new LinkedMultiValueMap<>();
					
					// save file to PI 
					byte[] bytes = file.getBytes();
					Path path = Paths.get(file.getOriginalFilename());
					Files.write(path, bytes);
					
					// --------
					
					// ByteArrayResource resource = new ByteArrayResource(bytes);
					// File newFile = new File(IMAGE_LOCATION + UPLOAD_IMAGE);
					// file.transferTo(newFile);
					System.out.printf("request erstellt");
					bodyMap.add(UPLOAD_IMAGE_NAME, new FileSystemResource(path.toFile()));
					HttpHeaders headers = new HttpHeaders();
					headers.setContentType(MediaType.MULTIPART_FORM_DATA);
					System.out.println(bodyMap.toString());
					HttpEntity<MultiValueMap<String, Object>> entity = new HttpEntity<>(bodyMap, headers);
					System.out.print(entity.toString());
					
					RestTemplate restTemplate = new RestTemplate();
					ResponseEntity<String> exchange = restTemplate.exchange(UPLOAD_URL, HttpMethod.POST, entity, String.class);
		
					System.out.printf("%s.forwardImage: forwarding image to url \"%s\"\n", getClass().getSimpleName(),
							UPLOAD_URL);
					message = exchange.getBody();
					status = HttpStatus.OK;
					System.out.printf("%s.forwardImage: forwarding done\n", getClass().getSimpleName());
				} catch (Exception e) {
					//message = String.format("Failed to forward file \"%s\"", file.getOriginalFilename());
					message = e.getMessage();
					status = HttpStatus.EXPECTATION_FAILED;
					System.out.printf("%s.Tensorflow: error while forwarding image file (%s)\n", getClass().getSimpleName(),
							e.getMessage());
				}
			} else {
				//ByteArrayResource resource = new ByteArrayResource(bytes);
				try {
					HttpHeaders headers = new HttpHeaders();
					String encoding = Base64.getEncoder().encodeToString((CLIENT_ID + ":" + CLIENT_SECRET).getBytes());
					headers.add("Authorization", "Basic " + encoding);
				//	headers.add("Authorization", "Basic c2ItMWE4MDA0MzktMjUzOC00NGI0LWE3ZTctZDY3OTI0YTU1ZTkwIWIzMzY2fG1sLWZvdW5kYXRpb24teHN1YWEtc3RkIWI1NDA6V0FtZTZhNEpIU1k0a2dSZXllMkw2MHdhYURvPQ==");
					//headers.setContentType(MediaType.MULTIPART_FORM_DATA);
					HttpEntity<MultiValueMap<String, Object>> entity = new HttpEntity<>(headers);
					
					// --------
					byte[] bytes = file.getBytes();
					Path path = Paths.get(file.getOriginalFilename());
					Files.write(path, bytes);
					// --------
					
					RestTemplate restTemplate_auth = new RestTemplate();
					ResponseEntity<String> exchange_auth = restTemplate_auth.exchange(SAP_AUTH_URL, HttpMethod.GET, entity, String.class);
					
					System.out.printf("%s.forwardImage: forwarding image to url \"%s\"\n", getClass().getSimpleName(),
							UPLOAD_URL);
					message_auth = exchange_auth.getBody();
					JSONObject obj = new JSONObject(message_auth);
					accessToken = "Bearer " + obj.getString("access_token");
					
					MultiValueMap<String, Object> bodyMap = new LinkedMultiValueMap<>();
//					ByteArrayResource resource = new ByteArrayResource(bytes);
				//	File newFile = new File(IMAGE_LOCATION + UPLOAD_IMAGE);
//					file.transferTo(newFile);
					System.out.printf("request erstellt");
					
					//bodyMap.add("files", new FileSystemResource(newFile));
					bodyMap.add(UPLOAD_IMAGE_NAME, new FileSystemResource(path.toFile()));

					HttpHeaders headers_forward = new HttpHeaders();
					headers_forward.add("Authorization", accessToken);
					headers_forward.setContentType(MediaType.MULTIPART_FORM_DATA);
					System.out.println(bodyMap.toString());
					HttpEntity<MultiValueMap<String, Object>> entity_forward = new HttpEntity<>(bodyMap, headers_forward);
					System.out.println(entity_forward.toString());
					
					RestTemplate restTemplate = new RestTemplate();
					ResponseEntity<String> exchange = restTemplate.exchange(UPLOAD_URL, HttpMethod.POST, entity_forward, String.class);
					System.out.println(accessToken);
					status = HttpStatus.OK;
					System.out.printf("%s.forwardImage: forwarding done\n", getClass().getSimpleName());
					String bodyString = exchange.getBody();
					JSONObject bodyObj = new JSONObject(bodyString);
					JSONArray predictions = bodyObj.getJSONArray("predictions");
					JSONObject prediction = predictions.getJSONObject(0);
					JSONArray results = prediction.getJSONArray("results");
					JSONObject result = results.getJSONObject(0);
					//message = result from SAP as String (name of object or Model) 
					message = result.get("label").toString();
				} catch (Exception e) {
					//message = String.format("Failed to forward file \"%s\"", file.getOriginalFilename());
				
					message = e.getMessage();
					status = HttpStatus.EXPECTATION_FAILED;
					System.out.printf("%s.SAP: error while forwarding image file (%s)\n", getClass().getSimpleName(),
							e.getMessage());
				}
			}
		
			try {
				// getting unity data
				MultiValueMap<String, Object> bodyMap = new LinkedMultiValueMap<>();
		//		GET_UNITY_DATA_URL;
				System.out.printf("Getting Unity Data");
				HttpHeaders headers = new HttpHeaders();
				headers.setContentType(MediaType.MULTIPART_FORM_DATA);
				System.out.println(bodyMap.toString());
				HttpEntity<MultiValueMap<String, Object>> entity = new HttpEntity<>(bodyMap, headers);
				System.out.print(entity.toString());
				
				RestTemplate restTemplate = new RestTemplate();
				// exchange = transaction or send
				ResponseEntity<String> exchange = restTemplate.exchange(GET_UNITY_DATA_URL + message, HttpMethod.GET, entity, String.class);
		
				System.out.printf("%s.Unity Data: Getting from url \"%s\"\n", getClass().getSimpleName(),
						GET_UNITY_DATA_URL);
				message = exchange.getBody();
				status = HttpStatus.OK;
				System.out.printf("%s.Unity Data: done\n", getClass().getSimpleName());
			}catch (Exception e) {
				//message = String.format("Failed to forward file \"%s\"", file.getOriginalFilename());
				message = e.getMessage();
				status = HttpStatus.EXPECTATION_FAILED;
				System.out.printf("%s.Unity Data: error while getting Unity Data (%s)\n", getClass().getSimpleName(),
						e.getMessage());
			}
		return ResponseEntity.status(status).body(message);
	}	
	
	/**
	 * Service to upload a jpeg image file. The uploaded file is stored as
	 * <code>file00.jpg</code>.
	 * 
	 * As a client for uploading use the website of this service
	 * <code>http://localhost:8082/index.xhtml</code>.
	 * 
	 * Url of this service: http://localhost:8082/rest02/upload/image
	 * 
	 * @param file
	 * @param request
	 * @param response
	 * @return
	 */
	
	@RequestMapping(value = "/upload/image", method = RequestMethod.POST)
	public synchronized ResponseEntity<String> uploadImage(@RequestParam(value = UPLOAD_IMAGE_NAME) MultipartFile file,
			HttpServletRequest request, HttpServletResponse response) {
		System.out.printf("%s.uploadImage(\"%s\")\n", getClass().getSimpleName(), file.getOriginalFilename());
		String message;
		HttpStatus status;
		try {
			byte[] bytes = file.getBytes();
			Path path = Paths.get(file.getOriginalFilename());
			Files.write(path, bytes);
			message = String.format("You successfully uploaded file \"%s\" as \"%s\"", file.getOriginalFilename(),
					path.toAbsolutePath());
			status = HttpStatus.OK;
			System.out.printf("%s.uploadImage: copied uploaded file to \"%s\"\n", getClass().getSimpleName(),
					path.toAbsolutePath());
			
//			File newFile = new File(IMAGE_LOCATION + UPLOAD_IMAGE);
//			file.transferTo(newFile);
//			message = String.format("You successfully uploaded file \"%s\" as \"%s\"", file.getOriginalFilename(),
//					newFile.getName());
//			status = HttpStatus.OK;
//			System.out.printf("%s.uploadImage: copied uploaded file to \"%s\"\n", getClass().getSimpleName(),
//					newFile.getName());
		} catch (Exception e) {
			message = String.format("Failed to upload file \"%s\"", file.getOriginalFilename());
			status = HttpStatus.EXPECTATION_FAILED;
			System.out.printf("%s.uploadImage: error during upload of image file (%s)\n", getClass().getSimpleName(),
					e.getMessage());
		}
		return ResponseEntity.status(status).body(message);
	}
	
	/**
	 * Service to control all the 3D Printer functions
	 * 
	 * Url of this service: http://localhost:8082/rest02/printer/command
	 * 
	 * @param command
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/printer/command", method = RequestMethod.POST)
	public synchronized ResponseEntity<String> printer(@RequestParam(value = PRINTER_COMMAND) String command,
			HttpServletRequest request, HttpServletResponse response) {
		System.out.printf("3D Printer received command! ");
		
		Socket pingSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;
        
        String message;
		HttpStatus status;
		
        try {
            pingSocket = new Socket(PRINTER_SOCKETS[0], PRINTER_PORTS[0]);
            out = new PrintWriter(pingSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(pingSocket.getInputStream()));
        } catch (Exception e) {
        	message = String.format("Cannot connect to PRINTER on " + PRINTER_SOCKETS[0] + ":" + PRINTER_PORTS[0] + "! Please verify the socket and port number!!!");
			status = HttpStatus.EXPECTATION_FAILED;
			System.out.printf("%s, Printer Command %s failed! Error Message: %s", getClass().getSimpleName(), command, 
					e.getMessage());
			return ResponseEntity.status(status).body(message);
        }

        out.println(command);		// Hier kommen die Befehle rein
        try {
        	String telnetResponse = in.readLine();
			System.out.println(telnetResponse);
        	message = String.format("You have successfully executed: %s! \nResponse: %s", command , telnetResponse);
			status = HttpStatus.OK;
			System.out.printf("Execute successful: %s", command);
		} catch (IOException e) {
			message = String.format("Failed to execute command: %s ! Please check the command code!", command);
			status = HttpStatus.EXPECTATION_FAILED;
			System.out.printf("%s, Printer Command %s failed! Error Message: %s", getClass().getSimpleName(), command, 
					e.getMessage());
		}
        out.close();
        try {
			in.close();
			pingSocket.close();
		} catch (IOException e) {
			message = String.format("Failed to close socket!");
			status = HttpStatus.EXPECTATION_FAILED;
			System.out.printf("%s, Printer Command %s failed! Error Message: %s", getClass().getSimpleName(), command, 
					e.getMessage());
		}

		return ResponseEntity.status(status).body(message);
	}
	

	/**
	 * Service to print a file that is already existed on the 3D Printer
	 * 
	 * Url of this service: http://localhost:8082/rest02/printer/print
	 * 
	 * @param fileName
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/printer/print", method = RequestMethod.POST)
	public synchronized ResponseEntity<String> printerPrint(@RequestParam(value = PRINTER_PRINT) String fileName, @RequestParam(value = PRINTER_PRINT_PRINTER_ID) String printerid,
			HttpServletRequest request, HttpServletResponse response) {
		System.out.printf("3D Printer received print command! ");
		
		Socket pingSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;
        
        int pid = Integer.parseInt(printerid);
        String printer_url = PRINTER_SOCKETS[pid];
        int printer_port = PRINTER_PORTS[pid];
        String message;
		HttpStatus status;
        try {
            pingSocket = new Socket(printer_url, printer_port);
            out = new PrintWriter(pingSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(pingSocket.getInputStream()));
        } catch (Exception e) {
        	message = String.format("Cannot connect to PRINTER on " + printer_url + ":" + printer_port + "! Please verify the socket and port number!!!");
			status = HttpStatus.EXPECTATION_FAILED;
			System.out.printf("%s, Printer print command %s failed! Error Message: %s", getClass().getSimpleName(), fileName, 
					e.getMessage());
			return ResponseEntity.status(status).body(message);
        }
        
        String command = "M32 " + fileName;

        out.println(command);		// Hier kommen die Befehle rein
        try {
        	String telnetResponse = in.readLine();
			System.out.println(telnetResponse);
			message = String.format("You have successfully executed: %s! \nResponse: %s", command , telnetResponse);
			status = HttpStatus.OK;
			System.out.printf("Execute successful: %s", command);
		} catch (IOException e) {
			message = String.format("Failed to execute command: %s ! Please check the command code!", command);
			status = HttpStatus.EXPECTATION_FAILED;
			System.out.printf("%s, Printer Command %s failed! Error Message: %s", getClass().getSimpleName(), command, 
					e.getMessage());
		}
        out.close();
        try {
			in.close();
			pingSocket.close();
		} catch (IOException e) {
			message = String.format("Failed to close socket!");
			status = HttpStatus.EXPECTATION_FAILED;
			System.out.printf("%s, Printer Command %s failed! Error Message: %s", getClass().getSimpleName(), command, 
					e.getMessage());
		}

		return ResponseEntity.status(status).body(message);
	}
	
	/**
	 * Service to stop a file that is currently printing on the 3D Printer
	 * 
	 * Url of this service: http://localhost:8082/rest02/printer/stop
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/printer/stop", method = RequestMethod.POST)
	public synchronized ResponseEntity<String> printerStop(HttpServletRequest request, HttpServletResponse response) {
		System.out.printf("3D Printer received abort command! ");
		
		Socket pingSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;
        
        String message;
		HttpStatus status;
        try {
            pingSocket = new Socket(PRINTER_SOCKETS[0], PRINTER_PORTS[0]);
            out = new PrintWriter(pingSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(pingSocket.getInputStream()));
        } catch (Exception e) {
        	message = String.format("Cannot connect to PRINTER on " + PRINTER_SOCKETS[0] + ":" + PRINTER_PORTS[0] + "! Please verify the socket and port number!!!");
			status = HttpStatus.EXPECTATION_FAILED;
			System.out.printf("%s, Printer stop command failed! Error Message: %s", getClass().getSimpleName(),
					e.getMessage());
			return ResponseEntity.status(status).body(message);
        }
        
        String command = "M26";

        out.println(command);		// Hier kommen die Befehle rein
        try {
        	String telnetResponse = in.readLine();
			System.out.println(telnetResponse);
			message = String.format("You have successfully executed: %s! \nResponse: %s", command , telnetResponse);
			status = HttpStatus.OK;
			System.out.printf("Execute successful: %s", command);
		} catch (IOException e) {
			message = String.format("Failed to execute command: %s ! Please check the command code!", command);
			status = HttpStatus.EXPECTATION_FAILED;
			System.out.printf("%s, Printer Command %s failed! Error Message: %s", getClass().getSimpleName(), command, 
					e.getMessage());
		}
        out.close();
        try {
			in.close();
			pingSocket.close();
		} catch (IOException e) {
			message = String.format("Failed to close socket!");
			status = HttpStatus.EXPECTATION_FAILED;
			System.out.printf("%s, Printer Command %s failed! Error Message: %s", getClass().getSimpleName(), command, 
					e.getMessage());
		}

		return ResponseEntity.status(status).body(message);
	}
	
	/**
	 * Service to inquire the status of the print that is currently printing on the 3D Printer
	 * 
	 * Url of this service: http://localhost:8082/rest02/printer/status
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/printer/status", method = RequestMethod.POST)
	public synchronized ResponseEntity<String> printerStatus(HttpServletRequest request, HttpServletResponse response) {
		System.out.printf("3D Printer received status command! ");
		
		Socket pingSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;
        
        
        String message;
		HttpStatus status;
		// List<JSONObject> entities = new ArrayList<JSONObject>();
		// JSONArray entities = new JSONArray();
		JSONArray jsonArray = new JSONArray();
		for(int i=0; i<PRINTER_SOCKETS.length; i++) {
				
			if (i==0) {
				String printerurl = PRINTER_SOCKETS[i]; 
				int printerport = PRINTER_PORTS[i];
			
		        try {
		            pingSocket = new Socket(printerurl, printerport);
		            out = new PrintWriter(pingSocket.getOutputStream(), true);
		            in = new BufferedReader(new InputStreamReader(pingSocket.getInputStream()));
		        } catch (Exception e) {
		        	message = String.format("Cannot connect to PRINTER on " + printerurl + ":" + printerport + "! Please verify the socket and port number!!!");
					status = HttpStatus.EXPECTATION_FAILED;
					System.out.printf("%s, Printer stop command failed! Error Message: %s", getClass().getSimpleName(),
							e.getMessage());
					jsonArray.put("ERROR" + message);
					// entities.put(json);
					return ResponseEntity.status(status).body(jsonArray.toString());
		        }
		        
		        String command = "M27";
		
		        out.println(command);		// Hier kommen die Befehle rein
		        try {
		        	String telnetResponse = in.readLine();
					System.out.println(telnetResponse);
					// message = String.format("You have successfully executed: %s! \nResponse: %s", command , telnetResponse);
					message = String.format(telnetResponse);
					status = HttpStatus.OK;
					System.out.printf("Execute successful: %s", command);
				} catch (IOException e) {
					message = String.format("Failed to execute command: %s ! Please check the command code!", command);
					status = HttpStatus.EXPECTATION_FAILED;
					System.out.printf("%s, Printer Command %s failed! Error Message: %s", getClass().getSimpleName(), command, 
							e.getMessage());
				}
		        out.close();
		        try {
					in.close();
					pingSocket.close();
				} catch (IOException e) {
					message = String.format("Failed to close socket!");
					status = HttpStatus.EXPECTATION_FAILED;
					System.out.printf("%s, Printer Command %s failed! Error Message: %s", getClass().getSimpleName(), command, 
							e.getMessage());
				} 
		    JSONObject json = new JSONObject();
		    json.put("id", Integer.toString(i));
		    json.put("status", message);
		    
		    jsonArray.put(json);
		    
		}
			else {
				JSONObject json = new JSONObject();
			    json.put("id", Integer.toString(i));
			    json.put("status", "HP PRINTER READY");
			    
			    jsonArray.put(json);

				status = HttpStatus.OK;
			}
	        
	        
		}
		status = HttpStatus.OK;
		return ResponseEntity.status(status).body(jsonArray.toString());
	}

	
	/**
	 * Service which returns a jpeg image.
	 * 
	 * curl -i http://localhost:8082/rest02/download/image/file01.jpg
	 * 
	 * @return
	 */
	@RequestMapping(value = "/download/image/{file}", method = RequestMethod.GET)
	public synchronized ResponseEntity<byte[]> getImage(@PathVariable(value = "file") String file) throws IOException {
		File imageFile = new File(IMAGE_LOCATION + file);

		System.out.printf("%s.getImage(%s): %s\n", getClass().getSimpleName(), file, imageFile.getName());

		if (imageFile.exists()) {
			lastImage = file;
		}

		return ResponseEntity.ok().contentType(MediaType.IMAGE_JPEG).body(Files.readAllBytes(imageFile.toPath()));
	}

	/**
	 * Service which returns the previously returned image of the other service or
	 * the default image if the other service hasn't been called before.
	 * 
	 * curl -i http://localhost:8082/rest02/download/image
	 * 
	 * @return
	 * @throws IOException
	 */
	@RequestMapping(value = "/download/image", method = RequestMethod.GET)
	public synchronized ResponseEntity<byte[]> getImage() throws IOException {
		final File image = new File(IMAGE_LOCATION + UPLOAD_IMAGE);
		final String file = (image.exists() ? UPLOAD_IMAGE : DEFAULT_IMAGE);
		return getImage(file);
	}

	/**
	 * Test service which returns some user related entries of the Java System
	 * Properties.
	 * 
	 * curl -i http://localhost:8082/rest02/user
	 * 
	 * @return
	 */
	@RequestMapping(value = "/user", method = RequestMethod.GET)
	public String getUserData() {
		String result = String.format("user.name: \"%s\",\nuser.dir: \"%s\"", System.getProperty("user.name"),
				System.getProperty("user.dir"));
		return result;
	}

	/**
	 * Test service which executes command <code>ls</code> and returns the result.
	 * 
	 * curl -i http://localhost:8082/rest02/unix/ls
	 * 
	 * @return
	 */
	@RequestMapping(value = "/unix/ls", method = RequestMethod.GET)
	public String getUnixLs() {
		final String COMMAND = "/usr/bin/ls -a";
		String result = "foo";

		/*
		 * https://stackoverflow.com/questions/5711084/java-runtime-getruntime-getting-
		 * output-from-executing-a-command-line-program
		 */
		try {
			Runtime rt = Runtime.getRuntime();
			Process proc = rt.exec(COMMAND);

			BufferedReader stdInput = new BufferedReader(new InputStreamReader(proc.getInputStream()));

			StringBuffer sb = new StringBuffer();
			String s;
			while ((s = stdInput.readLine()) != null) {
				sb.append(s + "\n");
			}
			result = sb.toString();
		} catch (Exception e) {
			System.out.printf(">>> %sn", e.getMessage());
		}

		return result;
	}
}
